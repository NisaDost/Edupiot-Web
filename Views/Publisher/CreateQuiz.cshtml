@using EduPilot.Web.DTOs;
@{
    ViewData["Title"] = "Yeni Quiz Oluştur";
    List<int> grades = Enumerable.Range(1, 12).ToList();
}

<div class="d-flex flex-row">
    <partial name="_PublisherSidebar" />
    <div class="content">
        <div class="bg-card">
            <h2 class="fw-bold mb-5">Yeni Quiz Oluştur</h2>

            <form id="quizForm">
                <label for="grade" class="form-label">Sınıf Seçiniz</label>
                <select id="grade" class="form-select">
                    <option selected disabled>Seçiniz</option>
                    @foreach (var grade in grades)
                    {
                            <option value="@grade">@grade. Sınıf</option>
                    }
                </select>

                <label class="form-label mt-3">Ders Seçiniz</label>
                <select id="lesson" class="form-select" disabled></select>

                <label class="form-label mt-3">Konu Seçiniz</label>
                <select id="subject" name="SubjectId" class="form-select" disabled></select>

                <!-- Zorluk, Şık Sayısı ve Süre -->
                <div class="row mt-3">
                    <div class="col-md-4">
                        <label class="form-label">Zorluk Seviyesi</label>
                        <select id="difficulty" name="Difficulty" class="form-select">
                            <option value="">Seçiniz</option>
                            <option value="0">Kolay</option>
                            <option value="1">Orta</option>
                            <option value="2">Zor</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Şık Sayısı</label>
                        <select id="choiceCount" class="form-select">
                            <option value="3">3 Şık</option>
                            <option value="4">4 Şık</option>
                            <option value="5">5 Şık</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Süre (dakika)</label>
                        <input type="number" id="duration" name="Duration" class="form-control" min="1" step="1" placeholder="Dakika cinsinden" />
                    </div>
                </div>

                <div class="form-check mt-3">
                    <input class="form-check-input" type="checkbox" id="isActive" name="IsActive" value="true" checked>
                    <label class="form-check-label" for="isActive">Quiz Aktif Olsun</label>
                </div>

                <div id="questionFormContainer" class="mt-5"></div>

                <div class="d-grid mt-4">
                    <button type="button" id="addQuestionBtn" class="btn btn-success" disabled>Soru Ekle</button>
                </div>
                <div class="d-grid mt-3">
                    <button type="button" id="saveQuizBtn" class="btn btn-primary btn-lg" disabled>Quizi Kaydet</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
        <script>
            let addedQuestions = 0;

            function updateAddButtonState() {
                const isReady = $('#subject').val() && $('#difficulty').val() && $('#choiceCount').val() && $('#duration').val();
                $('#addQuestionBtn').prop('disabled', !isReady);
            }

            $("#grade").on("change", function () {
                const grade = $(this).val();
                $("#lesson").empty().append('<option selected disabled>Seçiniz</option>').prop("disabled", true);
                $("#subject").empty().append('<option selected disabled>Seçiniz</option>').prop("disabled", true);

                $.get("/Publisher/LoadLessons", { grade }, function (res) {
                    if (res.success) {
                        res.lessons.forEach(x => {
                            $("#lesson").append(`<option value="${x.id}">${x.name}</option>`);
                        });
                        $("#lesson").prop("disabled", false);
                    }
                });
            });

            $("#lesson").on("change", function () {
                const lessonId = $(this).val();
                $("#subject").empty().append('<option selected disabled>Seçiniz</option>').prop("disabled", true);

                $.get("/Publisher/LoadSubjects", { lessonId }, function (res) {
                    if (res.success) {
                        res.subjects.forEach(x => {
                            if (x.id) {
                                $("#subject").append(`<option value="${x.id}">${x.name}</option>`);
                            }
                        });
                        $("#subject").prop("disabled", false);
                    }
                });
            });

            $("#subject, #difficulty, #choiceCount, #duration").on("input change", updateAddButtonState);

            $("#choiceCount").on("change", function () {
                const count = parseInt($(this).val());
                $(".question-block").each(function () {
                    const incorrectContainer = $(this).find(".incorrect-answers");
                    incorrectContainer.empty();
                    incorrectContainer.append('<label class="form-label">Yanlış Cevaplar</label>');

                    for (let i = 0; i < count - 1; i++) {
                        incorrectContainer.append(`<input type="text" class="form-control mb-2 border-danger" name="Questions[${$(this).data('index')-1}].Choices[${i+1}].ChoiceContent">`);
                        incorrectContainer.append(`<input type="hidden" name="Questions[${$(this).data('index')-1}].Choices[${i+1}].IsCorrect" value="false">`);
                    }
                });
            });

            $("#questionFormContainer").on("click", ".remove-question", function () {
                $(this).closest(".question-block").remove();
                addedQuestions--;

                $(".question-block").each(function(index) {
                    const newIndex = index + 1;
                    $(this).data('index', newIndex);
                    $(this).find('h5').text(`Soru ${newIndex}`);

                    $(this).find("textarea[name$='QuestionContent']").attr('name', `Questions[${index}].QuestionContent`);
                    $(this).find("input[name$='File']").attr('name', `Questions[${index}].File`);
                    $(this).find("input[type='checkbox'][name$='isActive']").attr('name', `Questions[${index}].isActive`);
                    $(this).find("input[type='hidden'][name$='isActive']").attr('name', `Questions[${index}].isActive`);

                    $(this).find("input[name$='IsCorrect'][value='true']").closest('.mb-3').find("input[type='text']")
                        .attr('name', `Questions[${index}].Choices[0].ChoiceContent`);
                    $(this).find("input[name$='IsCorrect'][value='true']")
                        .attr('name', `Questions[${index}].Choices[0].IsCorrect`);

                    $(this).find(".incorrect-answers input[type='text']").each(function(choiceIndex) {
                        $(this).attr('name', `Questions[${index}].Choices[${choiceIndex+1}].ChoiceContent`);
                        $(this).next("input[type='hidden']").attr('name', `Questions[${index}].Choices[${choiceIndex+1}].IsCorrect`);
                    });
                });

                if (addedQuestions < 1) $("#saveQuizBtn").prop("disabled", true);
            });

            $("#addQuestionBtn").on("click", function () {
                if (addedQuestions >= 30) return alert("Bir quiz en fazla 30 soru içerebilir.");
                addedQuestions++;
                const index = addedQuestions;
                const choiceCount = parseInt($("#choiceCount").val());
                const questionIndex = index - 1;

                let incorrectInputs = "";
                for (let i = 0; i < choiceCount - 1; i++) {
                    incorrectInputs += `
                        <input type="text" class="form-control mb-2 border-danger" name="Questions[${questionIndex}].Choices[${i+1}].ChoiceContent">
                        <input type="hidden" name="Questions[${questionIndex}].Choices[${i+1}].IsCorrect" value="false">
                    `;
                }

                const html = `
                <div class="question-block mb-5" data-index="${index}">
                    <h5>Soru ${index}</h5>
                    <div class="mb-3">
                        <label class="form-label">Soru Metni</label>
                        <textarea class="form-control" rows="4" placeholder="Soru metni..." name="Questions[${questionIndex}].QuestionContent"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Soru Görseli (Opsiyonel)</label>
                        <input type="file" accept="image/*" name="Questions[${questionIndex}].File" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Doğru Cevap</label>
                        <input type="text" class="form-control border-success" name="Questions[${questionIndex}].Choices[0].ChoiceContent">
                        <input type="hidden" name="Questions[${questionIndex}].Choices[0].IsCorrect" value="true">
                    </div>
                    <div class="mb-3 incorrect-answers">
                        <label class="form-label">Yanlış Cevaplar</label>
                        ${incorrectInputs}
                    </div>
                    
                    <button type="button" class="btn btn-sm btn-outline-danger remove-question">Soruyu Kaldır</button>
                    <hr>
                </div>`;

                $("#questionFormContainer").append(html);
                $("#saveQuizBtn").prop("disabled", false);
            });

                $("#saveQuizBtn").on("click", function () {
        const subjectId = $("#subject").val();
        const duration = parseInt($("#duration").val());
        const isActive = $("#isActive").is(":checked") ? "true" : "false";  // Checkbox durumunu al

        if (!subjectId || isNaN(duration) || duration <= 0) return alert("Lütfen geçerli konu ve süre giriniz.");

        let error = false;
        $(".question-block").each(function () {
            const q = $(this);
            const text = q.find("textarea[name$='QuestionContent']").val()?.trim();
            const correct = q.find("input[name$='Choices[0].ChoiceContent']").val()?.trim();
            const incorrects = q.find("input[type='text'][name*='Choices'][name*='ChoiceContent']:not([name$='Choices[0].ChoiceContent'])");

            if (!text || !correct) {
                error = true;
                return;
            }

            incorrects.each(function() {
                if (!$(this).val()?.trim()) {
                    error = true;
                    return false;
                }
            });
        });

        if (error || $(".question-block").length === 0) {
            return alert("Lütfen tüm soruların metnini ve şıklarını doldurun.");
        }

        // Formu serialize ederken, checkbox'ı ekleyelim
        $("#quizForm").append(`<input type="hidden" name="IsActive" value="${isActive}" />`);

        const formData = new FormData(document.getElementById('quizForm'));

        $.ajax({
            url: "/Publisher/CreateQuiz",
            type: "POST",
            data: formData,
            processData: false,
            contentType: false,
            success: function(res) {
                if (res.success) {
                    alert("Quiz başarıyla kaydedildi.");
                    location.reload();
                } else {
                    alert("Quiz kaydedilemedi.");
                }
            },
            error: function(err) {
                console.error("Sunucu hatası:", err);
                alert("Quiz oluşturulurken hata oluştu.");
            }
        });
    });
        </script>
}