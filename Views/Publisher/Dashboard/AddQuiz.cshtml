@using EduPilot_Web.Models.DTOs;
@{
    ViewData["Title"] = "Yeni Quiz Oluştur";
    List<int> grades = Enumerable.Range(1, 12).ToList();
}

<div class="d-flex flex-row">
    <partial name="_PublisherSidebar" />

    <div class="content">
        <div class="bg-card">
            <h2 class="mb-4 text-center">Yeni Quiz Oluştur</h2>

            <!-- Sınıf Seçimi -->
            <label for="grade" class="form-label">Sınıf Seçiniz</label>
            <select id="grade" class="form-select">
                <option selected disabled>Seçiniz</option>
                @foreach (var grade in grades)
                {
                            <option value="@grade">@grade. Sınıf</option>
                }
            </select>

            <!-- Ders Dropdown -->
            <label class="form-label mt-3">Ders Seçiniz</label>
            <select id="lesson" class="form-select" disabled></select>

            <!-- Konu Dropdown -->
            <label class="form-label mt-3">Konu Seçiniz</label>
            <select id="subject" class="form-select" disabled></select>

            <!-- Zorluk Dropdown -->
            <label class="form-label mt-3">Zorluk Seviyesi</label>
            <select id="difficulty" class="form-select">
                <option value="">Seçiniz</option>
                <option value="Kolay">Kolay</option>
                <option value="Orta">Orta</option>
                <option value="Zor">Zor</option>
            </select>

            <!-- Şık Sayısı Dropdown -->
            <label class="form-label mt-3">Şık Sayısı</label>
            <select id="choiceCount" class="form-select">
                <option value="3">3 Şık</option>
                <option value="4">4 Şık</option>
                <option value="5">5 Şık</option>
            </select>

            <!-- Quiz Aktif mi -->
            <div class="form-check mt-3">
                <input class="form-check-input" type="checkbox" id="quizActive">
                <label class="form-check-label" for="quizActive">Quiz Aktif Olsun</label>
            </div>

            <!-- Soru Ekleme Formu -->
            <div id="questionFormContainer" class="mt-5"></div>

            <!-- Soru Ekle Butonu -->
            <div class="d-grid mt-4">
                <button id="addQuestionBtn" class="btn btn-success" disabled>Soru Ekle</button>
            </div>

            <!-- Quizi Kaydet Butonu -->
            <div class="d-grid mt-3">
                <button id="saveQuizBtn" class="btn btn-primary btn-lg" disabled>Quizi Kaydet</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
        <script>
        let addedQuestions = 0;

        function mapDifficulty(label) {
            if (label === "Kolay") return 0;
            if (label === "Orta") return 1;
            if (label === "Zor") return 2;
            return 0;
        }

        function updateAddButtonState() {
            $('#addQuestionBtn').prop('disabled', !( $('#subject').val() && $('#difficulty').val() && $('#choiceCount').val() ));
        }

        $("#grade").on("change", function () {
            const grade = $(this).val();
            $("#lesson").empty().append('<option selected disabled>Seçiniz</option>').prop("disabled", true);
            $("#subject").empty().append('<option selected disabled>Seçiniz</option>').prop("disabled", true);

            $.get("/Publisher/LoadLessons", { grade }, function (res) {
                if (res.success && res.lessons.length > 0) {
                    res.lessons.forEach(x => {
                        $("#lesson").append(`<option value="${x.id}">${x.name}</option>`);
                    });
                    $("#lesson").prop("disabled", false);
                }
            });
        });

        $("#lesson").on("change", function () {
            const lessonId = $(this).val();
            $("#subject").empty().append('<option selected disabled>Seçiniz</option>').prop("disabled", true);

            $.get("/Publisher/LoadSubjects", { lessonId }, function (res) {
                if (res.success && res.subjects.length > 0) {
                    res.subjects.forEach(x => {
                        if (x.id) {
                            $("#subject").append(`<option value="${x.id}">${x.name}</option>`);
                        }
                    });
                    $("#subject").prop("disabled", false);
                }
            });
        });

        $("#subject, #difficulty, #choiceCount").on("change", updateAddButtonState);

        $("#choiceCount").on("change", function () {
            const count = parseInt($(this).val());
            $(".question-block").each(function () {
                const incorrectContainer = $(this).find(".incorrect-answers");
                incorrectContainer.empty();
                for (let i = 0; i < count - 1; i++) {
                    incorrectContainer.append('<input type="text" class="form-control mb-2 border-danger" name="incorrect-answer">');
                }
            });
        });

        $("#questionFormContainer").on("click", ".remove-question", function () {
            $(this).closest(".question-block").remove();
            addedQuestions--;
            if (addedQuestions < 1) $("#saveQuizBtn").prop("disabled", true);
        });

        $("#addQuestionBtn").on("click", function () {
            if (addedQuestions >= 30) return alert("Bir quiz en fazla 30 soru içerebilir.");
            addedQuestions++;
            const index = addedQuestions;
            const choiceCount = parseInt($("#choiceCount").val());

            let incorrectInputs = "";
            for (let i = 0; i < choiceCount - 1; i++) {
                incorrectInputs += `<input type="text" class="form-control mb-2 border-danger" name="incorrect-answer">`;
            }

            const html = `
            <div class="question-block mb-5" data-index="${index}">
                <h5>Soru ${index}</h5>
                <div class="mb-3">
                    <label class="form-label">Soru Metni</label>
                    <textarea class="form-control" rows="4" placeholder="Soru metni..." name="question-text"></textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label">Soru Görseli (Opsiyonel)</label>
                    <input type="file" accept="image/*" name="question-image" class="form-control">
                </div>
                <div class="mb-3">
                    <label class="form-label">Doğru Cevap</label>
                    <input type="text" class="form-control border-success" name="correct-answer">
                </div>
                <div class="mb-3 incorrect-answers">
                    <label class="form-label">Yanlış Cevaplar</label>
                    ${incorrectInputs}
                </div>
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" checked name="is-active">
                    <label class="form-check-label">Bu soru aktif</label>
                </div>
                <button type="button" class="btn btn-sm btn-outline-danger remove-question">Soruyu Kaldır</button>
                <hr>
            </div>`;

            $("#questionFormContainer").append(html);
            $("#saveQuizBtn").prop("disabled", false);
        });

        $("#saveQuizBtn").on("click", function () {
            const subjectId = $("#subject").val();
            if (!subjectId || subjectId === "00000000-0000-0000-0000-000000000000") return alert("Geçerli konu seçiniz.");

            const quiz = {
                SubjectId: subjectId,
                Difficulty: mapDifficulty($("#difficulty").val()),
                Questions: []
            };

            let error = false;

            $(".question-block").each(function () {
                const q = $(this);
                const text = q.find("textarea[name='question-text']").val()?.trim();
                const correct = q.find("input[name='correct-answer']").val()?.trim();
                const incorrects = q.find("input[name='incorrect-answer']");
                const fileInput = q.find("input[name='question-image']")[0];

                if (!text || !correct || incorrects.length < 2) {
                    error = true;
                    return;
                }

                const fileName = fileInput?.files?.length > 0 ? fileInput.files[0].name : "";

                const question = {
                    QuestionContent: text,
                    isActive: q.find("input[name='is-active']").is(":checked"),
                    QuestionImage: fileName,
                    Choices: [{ ChoiceContent: correct, IsCorrect: true }]
                };

                incorrects.each(function () {
                    const val = $(this).val()?.trim();
                    if (val) question.Choices.push({ ChoiceContent: val, IsCorrect: false });
                });

                if (question.Choices.length < 3) return;
                quiz.Questions.push(question);
            });

            if (error || quiz.Questions.length === 0) return alert("Lütfen tüm soruların metnini ve şıklarını doldurun.");

            $.ajax({
                url: "/Publisher/CreateQuiz",
                method: "POST",
                contentType: "application/json",
                data: JSON.stringify(quiz),
                success: res => {
                    if (res.success) alert("Quiz başarıyla kaydedildi."), location.reload();
                    else alert("Quiz kaydedilemedi.");
                },
                error: err => {
                    console.error("Sunucu hatası:", err);
                    alert("Quiz oluşturulurken hata oluştu.");
                }
            });
        });
        </script>
}
