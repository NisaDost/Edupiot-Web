@{
    ViewData["Title"] = "Fotoğraf ile Yüz Tanıma Kayıt";
    var studentId = Context.Request.Query["sId"];
    var studentName = Context.Request.Query["sName"];
}

<div class="d-flex flex-row">
    <partial name="_InstitutionSidebar" />
    <div class="content">
        <div class="bg-card p-4">

            <h1 class="fw-bold mb-4">Yüz Tanıma Sistemi - Fotoğraf Kaydı</h1>

            <!-- Material Icons Yönergeler -->
            <div id="instructions" class="mb-4 p-3 border rounded bg-light">
                <h5><span class="material-symbols-outlined align-middle">info</span> Kayıt Talimatları</h5>
                <ol class="ps-3">
                    <li><span class="material-symbols-outlined text-primary align-middle">videocam</span> <strong>"Kamerayı Aç"</strong> butonuna tıklayın ve kamera izni verin.</li>
                    <li><span class="material-symbols-outlined text-primary align-middle">face</span> Nötr bir ifadeyle doğrudan kameraya bakın.</li>
                    <li><span class="material-symbols-outlined text-primary align-middle">photo_camera</span> <strong>Fotoğraf Çek</strong> butonuna tıklayın.</li>
                    <li><span class="material-symbols-outlined text-primary align-middle">save</span> <strong>Kaydet</strong> ile işlemi tamamlayın.</li>
                </ol>
                <p class="mb-0 text-muted"><i class="material-symbols-outlined text-warning align-middle">warning</i> Kayıt, yüz tanıma için gereklidir.</p>
            </div>

            <div class="d-flex justify-content-between flex-wrap">
                <div class="text-center">
                    <video id="video" width="480" height="360" autoplay style="border-radius: 8px; display: none; border: 1px solid #ccc;"></video>
                    <canvas id="canvas" width="480" height="360" style="display: none;"></canvas>
                </div>
                <div class="text-center">
                    <img id="photo" width="480" height="360" class="img-thumbnail" style="display: none;" />
                </div>
            </div>

            <div class="d-flex justify-content-center mt-4 gap-3 flex-wrap">
                <button id="startBtn" class="btn btn-primary">
                    <span class="material-symbols-outlined align-middle">videocam</span> Kamerayı Aç
                </button>
                <button id="captureBtn" class="btn btn-info" style="display: none;">
                    <span class="material-symbols-outlined align-middle">photo_camera</span> Fotoğraf Çek
                </button>
                <button id="uploadBtn" class="btn btn-success" style="display: none;">
                    <span class="material-symbols-outlined align-middle">save</span> Kaydet
                </button>
                <button id="stopBtn" class="btn btn-danger" style="display: none;">
                    <span class="material-symbols-outlined align-middle">cancel</span> Kamerayı Kapat
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const studentId = "@studentId";
        const studentName = "@studentName";

        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const photo = document.getElementById('photo');
        const startBtn = document.getElementById('startBtn');
        const captureBtn = document.getElementById('captureBtn');
        const uploadBtn = document.getElementById('uploadBtn');
        const stopBtn = document.getElementById('stopBtn');
        const instructions = document.getElementById('instructions');

        let stream;

        startBtn.addEventListener('click', async () => {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = stream;
                video.style.display = "block";
                captureBtn.style.display = "inline-block";
                stopBtn.style.display = "inline-block";
                instructions.style.display = "none";
            } catch (err) {
                alert("Kamera erişimi reddedildi.");
                console.error(err);
            }
        });

        stopBtn.addEventListener('click', () => {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
            }
            resetAll();
        });

        captureBtn.addEventListener('click', () => {
            const ctx = canvas.getContext('2d');
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            const imageData = canvas.toDataURL('image/png');
            photo.src = imageData;
            photo.style.display = "block";
            uploadBtn.style.display = "inline-block";
        });

        uploadBtn.addEventListener('click', async () => {
            const imageBase64 = photo.src.split(',')[1];
            const filename = `${studentName}.png`;

            const res = await fetch('/Institution/SaveCapturedPhoto', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ Image: imageBase64, Filename: filename, StudentId: studentId })
            });

            const result = await res.json();
            alert(result.message || "Fotoğraf kaydedildi.");
            resetAll();
        });

        function resetAll() {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
            }
            video.style.display = "none";
            canvas.style.display = "none";
            photo.style.display = "none";
            captureBtn.style.display = "none";
            uploadBtn.style.display = "none";
            stopBtn.style.display = "none";
            instructions.style.display = "block";
        }
    </script>
}
